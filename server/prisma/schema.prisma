// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VOTE_TYPE {
  UPVOTE 
  DOWNVOTE
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique  
  password  String
  questions Question[]
  answers   Answer[]
  votes     Vote[]
  comments  Comment[]
  notifications Notification[]
  createdAt DateTime @default(now())
}

model Question {
  id          String   @id @default(uuid())
  title       String
  description String
  tags        String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  answers     Answer[]
  createdAt   DateTime @default(now())
}

model Answer {
  id          String    @id @default(uuid())
  content     String
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  votes       Vote[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
}

model Vote {
  id        String   @id @default(uuid())
  type      VOTE_TYPE   // UPVOTE or DOWNVOTE
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  answerId  String
  answer    Answer   @relation(fields: [answerId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  answerId  String
  answer    Answer   @relation(fields: [answerId], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  type      String   // ANSWER, COMMENT, MENTION
  content   String
  relatedId String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}